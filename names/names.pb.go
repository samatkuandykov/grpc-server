// Code generated by protoc-gen-go. DO NOT EDIT.
// source: names.proto

package names

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Name struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4268625867c617c, []int{0}
}

func (m *Name) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Name.Unmarshal(m, b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Name.Marshal(b, m, deterministic)
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return xxx_messageInfo_Name.Size(m)
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Names struct {
	Name                 []*Name  `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Names) Reset()         { *m = Names{} }
func (m *Names) String() string { return proto.CompactTextString(m) }
func (*Names) ProtoMessage()    {}
func (*Names) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4268625867c617c, []int{1}
}

func (m *Names) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Names.Unmarshal(m, b)
}
func (m *Names) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Names.Marshal(b, m, deterministic)
}
func (m *Names) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Names.Merge(m, src)
}
func (m *Names) XXX_Size() int {
	return xxx_messageInfo_Names.Size(m)
}
func (m *Names) XXX_DiscardUnknown() {
	xxx_messageInfo_Names.DiscardUnknown(m)
}

var xxx_messageInfo_Names proto.InternalMessageInfo

func (m *Names) GetName() []*Name {
	if m != nil {
		return m.Name
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4268625867c617c, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Name)(nil), "names.Name")
	proto.RegisterType((*Names)(nil), "names.Names")
	proto.RegisterType((*Empty)(nil), "names.Empty")
}

func init() { proto.RegisterFile("names.proto", fileDescriptor_f4268625867c617c) }

var fileDescriptor_f4268625867c617c = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4b, 0xcc, 0x4d,
	0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xa4, 0xb8, 0x58, 0xfc,
	0x12, 0x73, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x40, 0x02, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x60, 0xb6, 0x92, 0x06, 0x17, 0x2b, 0x48, 0xae, 0x58, 0x48, 0x1e, 0x2e, 0xc9, 0xac, 0xc1, 0x6d,
	0xc4, 0xad, 0x07, 0x31, 0x07, 0x24, 0x07, 0x55, 0xc9, 0xce, 0xc5, 0xea, 0x9a, 0x5b, 0x50, 0x52,
	0x69, 0x94, 0xc8, 0xc5, 0x0d, 0x12, 0x0e, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xd2, 0xe6,
	0xe2, 0x76, 0x4f, 0x2d, 0x71, 0xcc, 0xc9, 0x81, 0x98, 0xc3, 0x03, 0xd5, 0x09, 0x56, 0x2b, 0xc5,
	0x83, 0x64, 0x4e, 0xb1, 0x12, 0x83, 0x90, 0x2a, 0x17, 0xbb, 0x63, 0x4a, 0x0a, 0xd8, 0x35, 0xc8,
	0x56, 0x48, 0x21, 0x73, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0xee, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x2b, 0xf3, 0x3e, 0x37, 0xce, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NameServiceClient is the client API for NameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NameServiceClient interface {
	// Get all names that user has entered
	GetAllNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Names, error)
	// Add a new name
	AddName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Name, error)
}

type nameServiceClient struct {
	cc *grpc.ClientConn
}

func NewNameServiceClient(cc *grpc.ClientConn) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) GetAllNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Names, error) {
	out := new(Names)
	err := c.cc.Invoke(ctx, "/names.NameService/GetAllNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) AddName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Name, error) {
	out := new(Name)
	err := c.cc.Invoke(ctx, "/names.NameService/AddName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameServiceServer is the server API for NameService service.
type NameServiceServer interface {
	// Get all names that user has entered
	GetAllNames(context.Context, *Empty) (*Names, error)
	// Add a new name
	AddName(context.Context, *Name) (*Name, error)
}

func RegisterNameServiceServer(s *grpc.Server, srv NameServiceServer) {
	s.RegisterService(&_NameService_serviceDesc, srv)
}

func _NameService_GetAllNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).GetAllNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/names.NameService/GetAllNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).GetAllNames(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_AddName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).AddName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/names.NameService/AddName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).AddName(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

var _NameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "names.NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllNames",
			Handler:    _NameService_GetAllNames_Handler,
		},
		{
			MethodName: "AddName",
			Handler:    _NameService_AddName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "names.proto",
}
